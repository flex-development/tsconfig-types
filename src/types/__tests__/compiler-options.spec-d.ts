/**
 * @file Unit Tests - CompilerOptions
 * @module tsconfig-types/types/tests/CompilerOptions
 */

import type TestSubject from '../compiler-options'

describe('unit:interfaces/CompilerOptions', () => {
  it('should allow empty object', () => {
    assertType<TestSubject>({})
  })

  it('should allow object with all compiler options', () => {
    assertType<Required<TestSubject>>({
      allowJs: true,
      allowSyntheticDefaultImports: true,
      allowUmdGlobalAccess: false,
      allowUnreachableCode: false,
      allowUnusedLabels: false,
      alwaysStrict: false,
      assumeChangesOnlyAffectDirectDependencies: false,
      baseUrl: '.',
      charset: 'utf8',
      checkJs: false,
      composite: false,
      declaration: true,
      declarationDir: 'dist',
      declarationMap: true,
      diagnostics: true,
      disableReferencedProjectLoad: false,
      disableSizeLimit: false,
      disableSolutionSearching: false,
      disableSourceOfProjectReferenceRedirect: false,
      downlevelIteration: false,
      emitBOM: false,
      emitDeclarationOnly: false,
      emitDecoratorMetadata: true,
      esModuleInterop: true,
      exactOptionalPropertyTypes: true,
      experimentalDecorators: true,
      explainFiles: false,
      extendedDiagnostics: false,
      fallbackPolling: 'fixedPollingInterval',
      forceConsistentCasingInFileNames: true,
      generateCpuProfile: 'profile.cpuprofile',
      importHelpers: false,
      importsNotUsedAsValues: 'error',
      incremental: false,
      inlineSourceMap: false,
      inlineSources: false,
      isolatedModules: true,
      jsx: 'react-jsx',
      jsxFactory: 'React.createElement',
      jsxFragmentFactory: 'React.Fragment',
      jsxImportSource: 'react',
      keyofStringsOnly: false,
      lib: ['es2020'],
      listEmittedFiles: false,
      listFiles: false,
      listFilesOnly: false,
      mapRoot: 'https://my-website.com/debug/sourcemaps/',
      maxNodeModuleJsDepth: 0,
      module: 'esnext',
      moduleDetection: 'force',
      moduleResolution: 'node',
      moduleSuffixes: ['.ios', '.native', ''],
      newLine: 'lf',
      noEmit: true,
      noEmitHelpers: false,
      noEmitOnError: false,
      noErrorTruncation: true,
      noFallthroughCasesInSwitch: true,
      noImplicitAny: true,
      noImplicitOverride: true,
      noImplicitReturns: true,
      noImplicitThis: true,
      noImplicitUseStrict: false,
      noLib: false,
      noPropertyAccessFromIndexSignature: false,
      noResolve: false,
      noStrictGenericChecks: false,
      noUncheckedIndexedAccess: true,
      noUnusedLocals: false,
      noUnusedParameters: false,
      out: 'dist/index.js',
      outDir: 'dist',
      outFile: 'dist/index.js',
      paths: {
        '#fixtures/*': ['__fixtures__/*'],
        '#src': ['src/index'],
        '#src/*': ['src/*'],
        '#tests/*': ['__tests__/*']
      },
      plugins: [],
      preserveConstEnums: true,
      preserveSymlinks: true,
      preserveValueImports: false,
      preserveWatchOutput: false,
      pretty: true,
      reactNamespace: 'React',
      removeComments: false,
      resolveJsonModule: true,
      rootDir: '.',
      rootDirs: [],
      skipDefaultLibCheck: false,
      skipLibCheck: true,
      sourceMap: true,
      sourceRoot: 'https://my-website.com/debug/source/',
      strict: true,
      strictBindCallApply: true,
      strictFunctionTypes: true,
      strictNullChecks: true,
      strictPropertyInitialization: true,
      stripInternal: false,
      suppressExcessPropertyErrors: false,
      suppressImplicitAnyIndexErrors: false,
      target: 'esnext',
      traceResolution: false,
      tsBuildInfoFile: '.tsbuildinfo',
      typeRoots: [],
      types: [],
      useDefineForClassFields: true,
      useUnknownInCatchVariables: true,
      watch: false,
      watchDirectory: 'useFsEvents',
      watchFile: 'useFsEvents'
    })
  })
})
